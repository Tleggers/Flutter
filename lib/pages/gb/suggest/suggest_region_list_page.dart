import 'package:flutter/material.dart';
import 'package:trekkit_flutter/api/suggest_mountain_api.dart';
import 'package:trekkit_flutter/models/gb/suggest_mountain.dart';

class RegionListPage extends StatefulWidget {
  final String regionId;

  const RegionListPage({super.key, required this.regionId});

  @override
  State<RegionListPage> createState() => _RegionListPageState();
}

class _RegionListPageState extends State<RegionListPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  final Map<String, String> regionNameMap = {
    'seoul': 'ÏÑúÏö∏',
    'gyeonggi': 'Í≤ΩÍ∏∞',
    'gangwon': 'Í∞ïÏõê',
    'chungbuk': 'Ï∂©Î∂Å',
    'chungnam': 'Ï∂©ÎÇ®',
    'jeonbuk': 'Ï†ÑÎ∂Å',
    'jeonnam': 'Ï†ÑÎÇ®',
    'gyeongbuk': 'Í≤ΩÎ∂Å',
    'gyeongnam': 'Í≤ΩÎÇ®',
    'jeju': 'Ï†úÏ£º',
  };

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    String regionName = regionNameMap[widget.regionId] ?? widget.regionId;

    return Scaffold(
      appBar: AppBar(
        title: Text(regionName),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 1,
        bottom: TabBar(
          controller: _tabController,
          tabs: const [Tab(text: 'ÏÇ∞'), Tab(text: 'Í±∑Í∏∞Í∏∏')],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [_buildMountainList(regionName), _buildTrailList()],
      ),
    );
  }

  // ‚úÖ ÏÇ∞ Î¶¨Ïä§Ìä∏ Ìò∏Ï∂ú
  Widget _buildMountainList(String regionName) {
    return FutureBuilder<List<SuggestMountain>>(
      future: SuggestMountainApi.fetchMountains(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        } else if (snapshot.hasError) {
          return const Center(child: Text('Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïã§Ìå®'));
        } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return const Center(child: Text('ÏÇ∞ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå'));
        } else {
          final allMountains = snapshot.data!;

          // üëâ Ïó¨Í∏∞ÏÑú ÏßÄÏó≠ ÌïÑÌÑ∞ÎßÅ (ÏÜåÏû¨ÏßÄÏóê ÏßÄÏó≠Î™Ö Ìè¨Ìï®ÎêòÎäîÏßÄ ÌôïÏù∏)
          final filtered =
              allMountains.where((mountain) {
                return mountain.location.contains(regionName);
              }).toList();

          return ListView.builder(
            itemCount: filtered.length,
            itemBuilder: (context, index) {
              final mountain = filtered[index];
              return ListTile(
                leading: Container(
                  width: 60,
                  height: 60,
                  color: Colors.grey[300],
                  child: const Icon(Icons.image, size: 30),
                ),
                title: Text(mountain.name),
                subtitle: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('${mountain.height}m'),
                    Text(shortLocation(mountain.location)),
                  ],
                ),
              );
            },
          );
        }
      },
    );
  }

  // ÏÜåÏû¨ÏßÄ ÏßßÍ≤å ÏûòÎùºÏ£ºÎäî Ìó¨ÌçºÌï®Ïàò
  String shortLocation(String? location) {
    if (location == null || location.isEmpty) return '';

    // 1Îã®Í≥Ñ: ÏâºÌëú Í∏∞Ï§ÄÏúºÎ°ú Ïïû Î∂ÄÎ∂ÑÎßå ÎÇ®ÍπÄ
    final firstPart = location.split(',')[0].trim();

    // 2Îã®Í≥Ñ: ÏïûÏóê ÏãúÎèÑ/ÏãúÍµ∞Íµ¨ÍπåÏßÄÎßå ÎÇ®ÍπÄ
    final parts = firstPart.split(' ');
    if (parts.length >= 2) {
      return '${parts[0]} ${parts[1]}';
    } else {
      return firstPart;
    }
  }

  Widget _buildTrailList() {
    return const Center(child: Text('Í±∑Í∏∞Í∏∏ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå'));
  }
}
